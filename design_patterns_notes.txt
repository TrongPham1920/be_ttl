# Design Patterns được sử dụng trong dự án

## 1. Repository Pattern
- Mục đích: Tách biệt logic truy cập dữ liệu khỏi business logic
- Vị trí áp dụng:
  + `services/accommodation_service.go`: Xử lý truy vấn dữ liệu chỗ ở
  + `services/auth_service.go`: Xử lý truy vấn dữ liệu người dùng
  + `services/order_service.go`: Xử lý truy vấn dữ liệu đơn hàng
- Ví dụ code:
```go
// Repository interface
type AccommodationRepository interface {
    GetAll() ([]models.Accommodation, error)
    GetByID(id uint) (*models.Accommodation, error)
    Create(acc *models.Accommodation) error
}

// Repository implementation
type accommodationRepository struct {
    db *gorm.DB
}

func (r *accommodationRepository) GetAll() ([]models.Accommodation, error) {
    var accommodations []models.Accommodation
    err := r.db.Find(&accommodations).Error
    return accommodations, err
}
```

## 2. Service Pattern
- Mục đích: Chứa business logic và xử lý các tác vụ phức tạp
- Vị trí áp dụng:
  + `services/accommodation_service.go`: Xử lý logic chỗ ở
  + `services/auth_service.go`: Xử lý logic xác thực
  + `services/order_service.go`: Xử lý logic đơn hàng
- Ví dụ code:
```go
type AccommodationService struct {
    repo AccommodationRepository
}

func (s *AccommodationService) GetAllAccommodationsForUser(userID uint) ([]models.Accommodation, error) {
    // Business logic here
    accommodations, err := s.repo.GetAll()
    if err != nil {
        return nil, err
    }
    // Filter and process data
    return accommodations, nil
}
```

## 3. Factory Pattern
- Mục đích: Tạo các instance của service với các dependencies được inject
- Vị trí áp dụng:
  + `services/accommodation_service.go`: NewAccommodationService
  + `services/auth_service.go`: NewAuthService
  + `services/order_service.go`: NewOrderService
- Ví dụ code:
```go
func NewAccommodationService(db *gorm.DB) *AccommodationService {
    repo := &accommodationRepository{db: db}
    return &AccommodationService{repo: repo}
}
```

## 4. Adapter Pattern
- Mục đích: Chuyển đổi interface giữa các service khác nhau
- Vị trí áp dụng:
  + `services/auth_service.go`: UserServiceAdapter
  + `controllers/order_controller.go`: Chuyển đổi giữa model và DTO
- Ví dụ code:
```go
type UserServiceAdapter struct {
    userService *UserService
}

func (a *UserServiceAdapter) GetUserByID(id uint) (*UserDTO, error) {
    user, err := a.userService.GetUserByID(id)
    if err != nil {
        return nil, err
    }
    return &UserDTO{
        ID: user.ID,
        Name: user.Name,
        Email: user.Email,
    }, nil
}
```

## 5. Strategy Pattern
- Mục đích: Định nghĩa các chiến lược xác thực khác nhau
- Vị trí áp dụng:
  + `services/auth_service.go`: Xác thực qua email, Google
- Ví dụ code:
```go
type AuthStrategy interface {
    Authenticate(credentials interface{}) (*User, error)
}

type EmailAuthStrategy struct{}
type GoogleAuthStrategy struct{}

func (s *EmailAuthStrategy) Authenticate(credentials interface{}) (*User, error) {
    // Implement email authentication
}

func (s *GoogleAuthStrategy) Authenticate(credentials interface{}) (*User, error) {
    // Implement Google authentication
}
```

## 6. Singleton Pattern
- Mục đích: Đảm bảo chỉ có một instance của database connection
- Vị trí áp dụng:
  + `config/database.go`: GetDB()
- Ví dụ code:
```go
var dbInstance *gorm.DB
var once sync.Once

func GetDB() *gorm.DB {
    once.Do(func() {
        dbInstance = initDB()
    })
    return dbInstance
}
```

## 7. Observer Pattern
- Mục đích: Cập nhật tự động khi có thay đổi
- Vị trí áp dụng:
  + `services/accommodation_service.go`: Cập nhật rating
- Ví dụ code:
```go
type RatingObserver interface {
    OnRatingChanged(accommodationID uint, newRating float64)
}

type AccommodationService struct {
    observers []RatingObserver
}

func (s *AccommodationService) UpdateRating(id uint, rating float64) error {
    // Update rating logic
    for _, observer := range s.observers {
        observer.OnRatingChanged(id, rating)
    }
    return nil
}
```

## 8. Template Method Pattern
- Mục đích: Định nghĩa khung cho các quy trình
- Vị trí áp dụng:
  + `services/email_service.go`: Gửi email
- Ví dụ code:
```go
type EmailTemplate interface {
    GetSubject() string
    GetBody() string
}

type VerificationEmail struct{}
type OrderConfirmationEmail struct{}

func SendEmail(template EmailTemplate) error {
    subject := template.GetSubject()
    body := template.GetBody()
    // Send email logic
    return nil
}
```

## 9. Builder Pattern
- Mục đích: Xây dựng query phức tạp theo từng bước
- Vị trí áp dụng:
  + `services/accommodation_service.go`: GetAllAccommodationsForUser
- Ví dụ code:
```go
type QueryBuilder struct {
    query *gorm.DB
}

func (b *QueryBuilder) WithPriceRange(min, max float64) *QueryBuilder {
    b.query = b.query.Where("price BETWEEN ? AND ?", min, max)
    return b
}

func (b *QueryBuilder) WithLocation(lat, lng float64) *QueryBuilder {
    b.query = b.query.Where("ST_Distance_Sphere(point(longitude, latitude), point(?, ?)) <= ?", lng, lat, 5000)
    return b
}
```

## 10. Chain of Responsibility Pattern
- Mục đích: Xử lý request theo chuỗi
- Vị trí áp dụng:
  + `middleware/auth.go`: Xác thực
- Ví dụ code:
```go
type Middleware interface {
    Handle(next http.Handler) http.Handler
}

type AuthMiddleware struct{}
type LoggingMiddleware struct{}

func (m *AuthMiddleware) Handle(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        // Auth logic
        next.ServeHTTP(w, r)
    })
}
```

## 11. Command Pattern
- Mục đích: Xử lý request như các command riêng biệt
- Vị trí áp dụng:
  + `controllers/order_controller.go`: Xử lý đơn hàng
- Ví dụ code:
```go
type Command interface {
    Execute() error
}

type CreateOrderCommand struct {
    order *models.Order
}

func (c *CreateOrderCommand) Execute() error {
    // Create order logic
    return nil
}
```

## 12. State Pattern
- Mục đích: Quản lý trạng thái của đối tượng
- Vị trí áp dụng:
  + `models/order.go`: Trạng thái đơn hàng
- Ví dụ code:
```go
type OrderState interface {
    Process(order *Order) error
}

type PendingState struct{}
type ConfirmedState struct{}
type CompletedState struct{}

func (s *PendingState) Process(order *Order) error {
    // Process pending order
    return nil
}
```

## 13. Proxy Pattern
- Mục đích: Cache kết quả truy vấn
- Vị trí áp dụng:
  + `services/accommodation_service.go`: Cache danh sách chỗ ở
- Ví dụ code:
```go
type AccommodationProxy struct {
    service *AccommodationService
    cache   *redis.Client
}

func (p *AccommodationProxy) GetAll() ([]models.Accommodation, error) {
    // Check cache first
    if cached, err := p.cache.Get("accommodations").Result(); err == nil {
        return unmarshalAccommodations(cached)
    }
    // If not in cache, get from service
    accommodations, err := p.service.GetAll()
    if err != nil {
        return nil, err
    }
    // Cache the result
    p.cache.Set("accommodations", marshalAccommodations(accommodations), time.Hour)
    return accommodations, nil
}
```

## 14. Decorator Pattern
- Mục đích: Thêm tính năng bảo mật
- Vị trí áp dụng:
  + `middleware/auth.go`: Xác thực
- Ví dụ code:
```go
type Service interface {
    Process() error
}

type SecureService struct {
    service Service
}

func (s *SecureService) Process() error {
    // Add security checks
    return s.service.Process()
}
```

## 15. Facade Pattern
- Mục đích: Đơn giản hóa việc khởi tạo ứng dụng
- Vị trí áp dụng:
  + `config/init.go`: InitApp()
- Ví dụ code:
```go
type AppFacade struct {
    db      *gorm.DB
    redis   *redis.Client
    config  *Config
}

func NewAppFacade() *AppFacade {
    return &AppFacade{
        db:     initDB(),
        redis:  initRedis(),
        config: loadConfig(),
    }
}
```

Lợi ích chung khi sử dụng các Design Pattern:
1. Code dễ bảo trì và mở rộng
2. Giảm sự phụ thuộc giữa các thành phần
3. Tăng khả năng tái sử dụng code
4. Dễ dàng test
5. Tăng tính linh hoạt của hệ thống
6. Giảm độ phức tạp của code
7. Dễ dàng thêm tính năng mới
8. Tăng tính bảo mật
9. Tối ưu hiệu năng
10. Dễ dàng quản lý lỗi 