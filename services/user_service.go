package services

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"time"
	_ "time/tzdata"

	"new/models"
	"new/services/logger"
	"new/services/notification"

	"github.com/gin-gonic/gin"
	"github.com/olahol/melody"
	"gorm.io/gorm"
)

const (
	RevenueShareRate = 0.7
	DefaultTimezone  = "Asia/Ho_Chi_Minh"
	MinRevenue       = 0
)

const (
	ErrCodeInvalidTimezone = "INVALID_TIMEZONE"
	ErrCodeNoRevenue       = "NO_REVENUE"
	ErrCodeUpdateFailed    = "UPDATE_FAILED"
	ErrCodeInvalidRevenue  = "INVALID_REVENUE"
	ErrCodeInvalidUserID   = "INVALID_USER_ID"
)

type ServiceError struct {
	Code    string
	Message string
	Err     error
}

func (e *ServiceError) Error() string {
	if e.Err != nil {
		return fmt.Sprintf("[%s] %s: %v", e.Code, e.Message, e.Err)
	}
	return fmt.Sprintf("[%s] %s", e.Code, e.Message)
}

type UserServiceInterface interface {
	GetTodayUserRevenue(ctx context.Context) ([]models.UserRevenue, error)
	UpdateUserAmounts(ctx context.Context, notificationService notification.Service) error
}

type NotificationObserver interface {
	Notify(message string) error
}

type MelodyObserver struct {
	session *melody.Session
	userID  uint
}

func NewMelodyObserver(session *melody.Session, userID uint) *MelodyObserver {
	return &MelodyObserver{
		session: session,
		userID:  userID,
	}
}

func (o *MelodyObserver) Notify(message string) error {
	return o.session.Write([]byte(message))
}

type UserService struct {
	db        *gorm.DB
	logger    logger.Logger
	melody    *melody.Melody
	observers map[uint][]NotificationObserver
}

type UserServiceOptions struct {
	DB     *gorm.DB
	Logger logger.Logger
}

func NewUserService(opts UserServiceOptions, m *melody.Melody) *UserService {
	return &UserService{
		db:        opts.DB,
		logger:    opts.Logger,
		melody:    m,
		observers: make(map[uint][]NotificationObserver),
	}
}

func validateRevenue(revenue float64) error {
	if revenue < MinRevenue {
		return &ServiceError{
			Code:    ErrCodeInvalidRevenue,
			Message: fmt.Sprintf("doanh thu ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng %f", MinRevenue),
		}
	}
	return nil
}

func validateUserID(userID uint) error {
	if userID == 0 {
		return &ServiceError{
			Code:    ErrCodeInvalidUserID,
			Message: "user ID kh√¥ng h·ª£p l·ªá",
		}
	}
	return nil
}

func (s *UserService) GetTodayUserRevenue(ctx context.Context) ([]models.UserRevenue, error) {
	var revenues []models.UserRevenue
	loc, err := time.LoadLocation(DefaultTimezone)
	if err != nil {
		return nil, &ServiceError{
			Code:    ErrCodeInvalidTimezone,
			Message: "timezone kh√¥ng h·ª£p l·ªá",
			Err:     err,
		}
	}
	today := time.Now().In(loc).AddDate(0, 0, -1).Format("2006-01-02")
	err = s.db.WithContext(ctx).Where(`date::date = ?`, today).Find(&revenues).Error
	if err != nil {
		return nil, &ServiceError{
			Code:    ErrCodeUpdateFailed,
			Message: "l·ªói khi truy v·∫•n doanh thu ng√†y hi·ªán t·∫°i",
			Err:     err,
		}
	}
	return revenues, nil
}

func (s *UserService) updateUserAmount(ctx context.Context, tx *gorm.DB, userID uint, revenue float64) error {
	if err := validateUserID(userID); err != nil {
		return err
	}
	if err := validateRevenue(revenue); err != nil {
		return err
	}
	adjustedRevenue := revenue * RevenueShareRate
	if err := tx.WithContext(ctx).Model(&models.User{}).
		Where("id = ?", userID).
		Update("amount", gorm.Expr("amount + ?", adjustedRevenue)).Error; err != nil {
		return &ServiceError{
			Code:    ErrCodeUpdateFailed,
			Message: fmt.Sprintf("l·ªói c·∫≠p nh·∫≠t amount cho user %d", userID),
			Err:     err,
		}
	}
	s.logger.Info("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng user_id %d: +%.2f", userID, revenue)
	return nil
}

func (s *UserService) sendNotification(notificationService notification.Service, userID uint, revenue float64) error {
	message := notification.NewMessageBuilder(userID, revenue).Build()
	return notificationService.SendMessage(message)
}

func (s *UserService) UpdateUserAmounts(ctx context.Context, notificationService notification.Service) error {
	revenues, err := s.GetTodayUserRevenue(ctx)
	if err != nil {
		s.logger.Error("‚ùå L·ªói l·∫•y doanh thu: %v", err)
		return err
	}
	if len(revenues) == 0 {
		s.logger.Info("‚ÑπÔ∏è Kh√¥ng c√≥ doanh thu n√†o ƒë·ªÉ c·∫≠p nh·∫≠t h√¥m nay.")
		return &ServiceError{
			Code:    ErrCodeNoRevenue,
			Message: "kh√¥ng c√≥ doanh thu ƒë·ªÉ c·∫≠p nh·∫≠t",
		}
	}
	tx := s.db.WithContext(ctx).Begin()
	if tx.Error != nil {
		return &ServiceError{
			Code:    ErrCodeUpdateFailed,
			Message: "l·ªói khi b·∫Øt ƒë·∫ßu transaction",
			Err:     tx.Error,
		}
	}
	for _, rev := range revenues {
		if err := s.updateUserAmount(ctx, tx, rev.UserID, rev.Revenue); err != nil {
			tx.Rollback()
			return err
		}
		if err := s.sendNotification(notificationService, rev.UserID, rev.Revenue); err != nil {
			s.logger.Error("‚ùå L·ªói g·ª≠i th√¥ng b√°o: %v", err)
		}
	}
	if err := tx.Commit().Error; err != nil {
		return &ServiceError{
			Code:    ErrCodeUpdateFailed,
			Message: "l·ªói khi commit transaction",
			Err:     err,
		}
	}
	s.logger.Info("‚úÖ Ho√†n t·∫•t c·∫≠p nh·∫≠t amount cho t·∫•t c·∫£ users.")
	return nil
}

// ƒëƒÉng k√Ω observer cho user
func (s *UserService) RegisterObserver(session *melody.Session, userID uint) {
	observer := NewMelodyObserver(session, userID)
	s.observers[userID] = append(s.observers[userID], observer)
	s.logger.Info("Ng∆∞·ªùi quan s√°t ƒë√£ ƒëƒÉng k√Ω cho userID: %d", userID)
}

// x√≥a observer cho user
func (s *UserService) RemoveObserver(session *melody.Session, userID uint) {
	observers := s.observers[userID]
	for i, obs := range observers {
		if obs.(*MelodyObserver).session == session {
			s.observers[userID] = append(observers[:i], observers[i+1:]...)
			break
		}
	}
	s.logger.Info("ƒê√£ x√≥a ng∆∞·ªùi quan s√°t cho userID: %d", userID)
}

func (s *UserService) NotifyAll(c *gin.Context) {
	var req struct {
		Message string `json:"message" binding:"required"`
	}
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(400, gin.H{"error": "tin nh·∫Øn l√† b·∫Øt bu·ªôc"})
		return
	}
	notificationService := notification.NewMelodyService(s.melody)
	err := notificationService.SendMessage(req.Message)
	if err != nil {
		s.logger.Error("‚ùå L·ªói g·ª≠i th√¥ng b√°o t·ªïng: %v", err)
		c.JSON(500, gin.H{"error": err.Error()})
		return
	}
	s.logger.Info("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o t·ªïng: %s", req.Message)
	c.JSON(200, gin.H{"message": "Broadcast sent"})
}

// NotifyUser v·ªõi th√¥ng b√°o qua WebSocket v√† email ƒë·ªìng th·ªùi
func (s *UserService) NotifyUser(c *gin.Context) {
	userIDStr := c.Param("userID")
	fmt.Println("ƒê√£ nh·∫≠n userID t·ª´ y√™u c·∫ßu:", userIDStr)

	userID, err := strconv.ParseUint(userIDStr, 10, 32)
	if err != nil {
		fmt.Println("Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c userID:", userIDStr, "error:", err)
		c.JSON(400, gin.H{"error": "invalid userID"})
		return
	}
	fmt.Println("Parsed userID:", userID)

	var req struct {
		Message string `json:"message" binding:"required"`
	}
	if err := c.ShouldBindJSON(&req); err != nil {
		fmt.Println("Failed to bind JSON for userID", userID, "error:", err)
		c.JSON(400, gin.H{"error": "message is required"})
		return
	}
	fmt.Println("ƒê√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn cho userID", userID, ":", req.Message)

	message := notification.NewMessageBuilder(uint(userID), 0).Build() + " " + req.Message
	fmt.Println("Tin nh·∫Øn ƒë∆∞·ª£c x√¢y d·ª±ng cho userID", userID, ":", message)

	observers := s.observers[uint(userID)]
	var user models.User
	// L·∫•y th√¥ng tin user t·ª´ DB ƒë·ªÉ l·∫•y email
	if err := s.db.First(&user, userID).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			fmt.Println("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng cho userID:", userID)
			c.JSON(404, gin.H{"error": "kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"})
			return
		}
		fmt.Println("Kh√¥ng th·ªÉ t√¨m n·∫°p ng∆∞·ªùi d√πng cho userID", userID, ":", err)
		c.JSON(500, gin.H{"error": "kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c ng∆∞·ªùi d√πng"})
		return
	}

	// G·ª≠i qua WebSocket n·∫øu c√≥ observer
	if len(observers) > 0 {
		fmt.Println("Found", len(observers), "ng∆∞·ªùi quan s√°t cho userID:", userID)
		for _, observer := range observers {
			if err := observer.Notify(message); err != nil {
				fmt.Println("‚ùå Kh√¥ng th√¥ng b√°o ƒë∆∞·ª£c userID", userID, ":", err)
			}
		}
		fmt.Println("‚úÖ ƒê√£ g·ª≠i th√†nh c√¥ng th√¥ng b√°o WebSocket t·ªõi userID", userID, ":", req.Message)
	} else {
		fmt.Println("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi quan s√°t n√†o cho userID:", userID)
	}

	// G·ª≠i qua email b·∫•t k·ªÉ c√≥ observer hay kh√¥ng
	err = sendNews(user.Email, "Th√¥ng b√°o t·ª´ h·ªá th·ªëng", message)
	if err != nil {
		fmt.Println("‚ùå Kh√¥ng g·ª≠i ƒë∆∞·ª£c th√¥ng b√°o qua email cho userID", userID, ":", err)
		// Kh√¥ng tr·∫£ l·ªói ngay, ch·ªâ log v√¨ WebSocket c√≥ th·ªÉ ƒë√£ th√†nh c√¥ng
	} else {
		fmt.Println("üìß Th√¥ng b√°o qua email ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn", user.Email, "for userID:", userID)
	}

	// Tr·∫£ v·ªÅ response th√†nh c√¥ng n·∫øu √≠t nh·∫•t m·ªôt trong hai ph∆∞∆°ng th·ª©c (WebSocket ho·∫∑c email) ho·∫°t ƒë·ªông
	c.JSON(200, gin.H{"message": "Th√¥ng b√°o ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ng∆∞·ªùi d√πng"})
}

type UserServiceAdapter struct {
	service *UserService
}

func NewUserServiceAdapter(service *UserService) *UserServiceAdapter {
	return &UserServiceAdapter{service: service}
}

func (a *UserServiceAdapter) UpdateUserAmounts(m *melody.Melody) error {
	notificationService := notification.NewMelodyService(m)
	return a.service.UpdateUserAmounts(context.Background(), notificationService)
}
